using Parameters: @with_kw, @unpack
using LinearAlgebra: eigvals
using ForwardDiff
using NLsolve
using DifferentialEquations
using PyPlot

@with_kw mutable struct ModelPar
    a_R1C1 = 0.9; h_R1C1 = 0.6; e_R1C1 = 0.7
    a_R2C2 = 0.9; h_R2C2 = 0.6; e_R2C2 = 0.7
    a_PC1 = 1.0; h_PC1 = 0.6; e_PC1 = 0.8
    a_PC2 = 0.9; h_PC2 = 0.6; e_PC2 = 0.8
    m_P = 0.3; r1 = 1.5; K1 = 1.0; r2 = 1.5; K2 = 1.22
    m_C1 = 0.3; m_C2 = 0.3; pref::Function = fixed_pref
    Ω = 0.6; ω = 0.6
end

function fixed_pref(u, p, t)
    p.Ω
end

function adapt_pref(u, p, t)
    return p.ω * u[2] / (p.ω * u[2] + (1 - p.ω) * u[4])
end

function model!(du, u, p, t)
    @unpack r1, K1, r2, K2, a_R1C1, h_R1C1, e_R1C1, a_R2C2, h_R2C2, e_R2C2, m_C1, m_C2, a_PC1, h_PC1, e_PC1, a_PC2, h_PC2, e_PC2, m_P, Ω, ω = p
    R1, C1, R2, C2, P = u
    Ω = p.pref(u, p, t)
    
    int_R1C1 = a_R1C1 * R1 * C1 / (1 + a_R1C1 * h_R1C1 * R1)
    int_R2C2 = a_R2C2 * R2 * C2 / (1 + a_R2C2 * h_R2C2 * R2)
    denom_PC1C2 = 1 + Ω * a_PC1 * h_PC1 * C1 + (1 - Ω) * a_PC2 * h_PC2 * C2
    num_PC2 = (1 - Ω) * a_PC2 * C2 * P
    num_PC1 = Ω * a_PC1 * C1 * P
    
    du[1] = r1 * R1 * (1 - R1 / K1) - int_R1C1
    du[2] = e_R1C1 * int_R1C1 - (num_PC1 / denom_PC1C2) - m_C1 * C1
    du[3] = r2 * R2 * (1 - R2 / K2) - int_R2C2
    du[4] = e_R2C2 * int_R2C2 - (num_PC2 / denom_PC1C2) - m_C2 * C2
    du[5] = (e_PC1 * num_PC1 + e_PC2 * num_PC2) / denom_PC1C2 - m_P * P
end

function rhs(u, p)
    du = similar(u)
    model!(du, u, p, zero(u))
    du
end

cmat(u, p) = ForwardDiff.jacobian(x -> rhs(x, p), u)

function jacobian_at_u0(K2_val, K2_start, K2_end, K1_base, u0, p)
    # Calculate the fraction of the range covered by the current K2_val
    fraction_of_range = (K2_val - K2_start) / (K2_end - K2_start)
    
    # Calculate the current decrease to be applied based on the fraction of the total decrease 
    current_decrease = 1.15 * fraction_of_range
    
    # Adjust K1 based on the current decrease, ensuring total K decreases gradually across the K2 range
    p.K1 = K1_base - current_decrease  # Subtract only the current decrease from K1_base
    p.K2 = K2_val  # Update K2 value to current
    
    # Compute and return the Jacobian matrix at u0 with the updated parameters
    return cmat(u0, p)
end

function calc_eigvals_sorted(M)
    eigvals_sorted = sort(eigvals(M), by=abs, rev=true)
    return eigvals_sorted
end

function plot_eigenvalues(K2_range, K1_base, u0, p, title_prefix)
    K2_start = first(K2_range)
    K2_end = last(K2_range)
    real_parts = Dict(1 => Float64[], 2 => Float64[], 3 => Float64[])
    imag_parts = Dict(1 => Float64[], 2 => Float64[], 3 => Float64[])

    for K2_val in K2_range
        jac = jacobian_at_u0(K2_val, K2_start, K2_end, K1_base, u0, p)
        eigvals_sorted = calc_eigvals_sorted(jac)

        for i in 1:3
            push!(real_parts[i], real(eigvals_sorted[i]))
            push!(imag_parts[i], imag(eigvals_sorted[i]))
        end
    end

    for i in 1:3
        figure()
        plot(K2_range, real_parts[i], label="Real Part - Eigenvalue $i", color=["red", "blue", "green"][i])
        plot(K2_range, imag_parts[i], label="Imag Part - Eigenvalue $i", linestyle="--", color=["red", "blue", "green"][i])
        xlabel("K2 values")
        ylabel("Eigenvalue Components")
        title("$(title_prefix) Eigenvalue $i")
        legend()
    end
end

# Example usage
K2_range = 0.6:0.01:1.22  # Adjusted range for demonstration
K1_base = 1.2
u0 = [0.8, 0.4, 0.8, 0.4, 0.3]
p = ModelPar()

plot_eigenvalues(K2_range, K1_base, u0, p, "Top 3")